/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createWorkoutFromDiscriminatorValue, serializePostWorkoutsRequestBody, serializeWorkout, type PostWorkoutsRequestBody, type Workout } from '../../models/index.js';
// @ts-ignore
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/index.js';
// @ts-ignore
import { EventsRequestBuilderRequestsMetadata, type EventsRequestBuilder } from './events/index.js';
// @ts-ignore
import { type WithWorkoutItemRequestBuilder, WithWorkoutItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type ApiError, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Workout400Error}
 */
// @ts-ignore
export function createWorkout400ErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkout400Error;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkoutsGetResponse}
 */
// @ts-ignore
export function createWorkoutsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkoutsGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWorkout400Error(workout400Error: Partial<Workout400Error> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { workout400Error.errorEscaped = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWorkoutsGetResponse(workoutsGetResponse: Partial<WorkoutsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "page": n => { workoutsGetResponse.page = n.getNumberValue(); },
        "page_count": n => { workoutsGetResponse.pageCount = n.getNumberValue(); },
        "workouts": n => { workoutsGetResponse.workouts = n.getCollectionOfObjectValues<Workout>(createWorkoutFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWorkout400Error(writer: SerializationWriter, workout400Error: Partial<Workout400Error> | undefined | null = {}) : void {
    if (workout400Error) {
        writer.writeStringValue("error", workout400Error.errorEscaped);
        writer.writeAdditionalData(workout400Error.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWorkoutsGetResponse(writer: SerializationWriter, workoutsGetResponse: Partial<WorkoutsGetResponse> | undefined | null = {}) : void {
    if (workoutsGetResponse) {
        writer.writeNumberValue("page", workoutsGetResponse.page);
        writer.writeNumberValue("page_count", workoutsGetResponse.pageCount);
        writer.writeCollectionOfObjectValues<Workout>("workouts", workoutsGetResponse.workouts, serializeWorkout);
        writer.writeAdditionalData(workoutsGetResponse.additionalData);
    }
}
export interface Workout400Error extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Error message
     */
    errorEscaped?: string | null;
}
export interface WorkoutsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Current page number
     */
    page?: number | null;
    /**
     * Total number of pages
     */
    pageCount?: number | null;
    /**
     * The workouts property
     */
    workouts?: Workout[] | null;
}
/**
 * Builds and executes requests for operations under /v1/workouts
 */
export interface WorkoutsRequestBuilder extends BaseRequestBuilder<WorkoutsRequestBuilder> {
    /**
     * The count property
     */
    get count(): CountRequestBuilder;
    /**
     * The events property
     */
    get events(): EventsRequestBuilder;
    /**
     * Gets an item from the ApiSdk.v1.workouts.item collection
     * @param workoutId The id of the workout
     * @returns {WithWorkoutItemRequestBuilder}
     */
     byWorkoutId(workoutId: string) : WithWorkoutItemRequestBuilder;
    /**
     * Get a paginated list of workouts
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WorkoutsGetResponse>}
     */
     get(requestConfiguration?: RequestConfiguration<WorkoutsRequestBuilderGetQueryParameters> | undefined) : Promise<WorkoutsGetResponse | undefined>;
    /**
     * Create a new workout
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Workout>}
     * @throws {Workout400Error} error when the service returns a 400 status code
     */
     post(body: PostWorkoutsRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Workout | undefined>;
    /**
     * Get a paginated list of workouts
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<WorkoutsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create a new workout
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: PostWorkoutsRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get a paginated list of workouts
 */
export interface WorkoutsRequestBuilderGetQueryParameters {
    /**
     * Page number (Must be 1 or greater)
     */
    page?: number;
    /**
     * Number of items on the requested page (Max 10)
     */
    pageSize?: number;
}
/**
 * Uri template for the request builder.
 */
export const WorkoutsRequestBuilderUriTemplate = "{+baseurl}/v1/workouts{?page*,pageSize*}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WorkoutsRequestBuilderNavigationMetadata: Record<Exclude<keyof WorkoutsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byWorkoutId: {
        requestsMetadata: WithWorkoutItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["workoutId"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
    events: {
        requestsMetadata: EventsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WorkoutsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: WorkoutsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createWorkoutsGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: WorkoutsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createWorkout400ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWorkoutFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePostWorkoutsRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
