// @ts-ignore
import type {
	AdditionalDataHolder,
	ApiError,
	BaseRequestBuilder,
	KeysToExcludeForNavigationMetadata,
	NavigationMetadata,
	Parsable,
	ParsableFactory,
	ParseNode,
	RequestConfiguration,
	RequestInformation,
	RequestsMetadata,
	SerializationWriter,
} from "@microsoft/kiota-abstractions";
/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import {
	type PostRoutineFolderRequestBody,
	type RoutineFolder,
	createRoutineFolderFromDiscriminatorValue,
	serializePostRoutineFolderRequestBody,
	serializeRoutineFolder,
} from "../../models/index.js";
// @ts-ignore
import {
	type WithFolderItemRequestBuilder,
	WithFolderItemRequestBuilderRequestsMetadata,
} from "./item/index.js";

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Routine_foldersGetResponse}
 */
// @ts-ignore
export function createRoutine_foldersGetResponseFromDiscriminatorValue(
	parseNode: ParseNode | undefined,
): (instance?: Parsable) => Record<string, (node: ParseNode) => void> {
	return deserializeIntoRoutine_foldersGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RoutineFolder400Error}
 */
// @ts-ignore
export function createRoutineFolder400ErrorFromDiscriminatorValue(
	parseNode: ParseNode | undefined,
): (instance?: Parsable) => Record<string, (node: ParseNode) => void> {
	return deserializeIntoRoutineFolder400Error;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRoutine_foldersGetResponse(
	routine_foldersGetResponse:
		| Partial<Routine_foldersGetResponse>
		| undefined = {},
): Record<string, (node: ParseNode) => void> {
	return {
		page: (n) => {
			routine_foldersGetResponse.page = n.getNumberValue();
		},
		page_count: (n) => {
			routine_foldersGetResponse.pageCount = n.getNumberValue();
		},
		routine_folders: (n) => {
			routine_foldersGetResponse.routineFolders =
				n.getCollectionOfObjectValues<RoutineFolder>(
					createRoutineFolderFromDiscriminatorValue,
				);
		},
	};
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRoutineFolder400Error(
	routineFolder400Error: Partial<RoutineFolder400Error> | undefined = {},
): Record<string, (node: ParseNode) => void> {
	return {
		error: (n) => {
			routineFolder400Error.errorEscaped = n.getStringValue();
		},
	};
}
export interface Routine_foldersGetResponse
	extends AdditionalDataHolder,
		Parsable {
	/**
	 * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
	 */
	additionalData?: Record<string, unknown>;
	/**
	 * Current page number
	 */
	page?: number | null;
	/**
	 * Total number of pages
	 */
	pageCount?: number | null;
	/**
	 * The routine_folders property
	 */
	routineFolders?: RoutineFolder[] | null;
}
/**
 * Builds and executes requests for operations under /v1/routine_folders
 */
export interface Routine_foldersRequestBuilder
	extends BaseRequestBuilder<Routine_foldersRequestBuilder> {
	/**
	 * Gets an item from the ApiSdk.v1.routine_folders.item collection
	 * @param folderId The id of the routine folder
	 * @returns {WithFolderItemRequestBuilder}
	 */
	byFolderId(folderId: string): WithFolderItemRequestBuilder;
	/**
	 * Get a paginated list of routine folders available on the account.
	 * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
	 * @returns {Promise<Routine_foldersGetResponse>}
	 */
	get(
		requestConfiguration?:
			| RequestConfiguration<Routine_foldersRequestBuilderGetQueryParameters>
			| undefined,
	): Promise<Routine_foldersGetResponse | undefined>;
	/**
	 * Create a new routine folder. The folder will be created at index 0, and all other folders will have their indexes incremented.
	 * @param body The request body
	 * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
	 * @returns {Promise<RoutineFolder>}
	 * @throws {RoutineFolder400Error} error when the service returns a 400 status code
	 */
	post(
		body: PostRoutineFolderRequestBody,
		requestConfiguration?: RequestConfiguration<object> | undefined,
	): Promise<RoutineFolder | undefined>;
	/**
	 * Get a paginated list of routine folders available on the account.
	 * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
	 * @returns {RequestInformation}
	 */
	toGetRequestInformation(
		requestConfiguration?:
			| RequestConfiguration<Routine_foldersRequestBuilderGetQueryParameters>
			| undefined,
	): RequestInformation;
	/**
	 * Create a new routine folder. The folder will be created at index 0, and all other folders will have their indexes incremented.
	 * @param body The request body
	 * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
	 * @returns {RequestInformation}
	 */
	toPostRequestInformation(
		body: PostRoutineFolderRequestBody,
		requestConfiguration?: RequestConfiguration<object> | undefined,
	): RequestInformation;
}
/**
 * Get a paginated list of routine folders available on the account.
 */
export interface Routine_foldersRequestBuilderGetQueryParameters {
	/**
	 * Page number (Must be 1 or greater)
	 */
	page?: number;
	/**
	 * Number of items on the requested page (Max 10)
	 */
	pageSize?: number;
}
export interface RoutineFolder400Error
	extends AdditionalDataHolder,
		ApiError,
		Parsable {
	/**
	 * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
	 */
	additionalData?: Record<string, unknown>;
	/**
	 * Error message
	 */
	errorEscaped?: string | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRoutine_foldersGetResponse(
	writer: SerializationWriter,
	routine_foldersGetResponse:
		| Partial<Routine_foldersGetResponse>
		| undefined
		| null = {},
): void {
	if (routine_foldersGetResponse) {
		writer.writeNumberValue("page", routine_foldersGetResponse.page);
		writer.writeNumberValue("page_count", routine_foldersGetResponse.pageCount);
		writer.writeCollectionOfObjectValues<RoutineFolder>(
			"routine_folders",
			routine_foldersGetResponse.routineFolders,
			serializeRoutineFolder,
		);
		writer.writeAdditionalData(routine_foldersGetResponse.additionalData);
	}
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRoutineFolder400Error(
	writer: SerializationWriter,
	routineFolder400Error: Partial<RoutineFolder400Error> | undefined | null = {},
): void {
	if (routineFolder400Error) {
		writer.writeStringValue("error", routineFolder400Error.errorEscaped);
		writer.writeAdditionalData(routineFolder400Error.additionalData);
	}
}
/**
 * Uri template for the request builder.
 */
export const Routine_foldersRequestBuilderUriTemplate =
	"{+baseurl}/v1/routine_folders{?page*,pageSize*}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const Routine_foldersRequestBuilderNavigationMetadata: Record<
	Exclude<
		keyof Routine_foldersRequestBuilder,
		KeysToExcludeForNavigationMetadata
	>,
	NavigationMetadata
> = {
	byFolderId: {
		requestsMetadata: WithFolderItemRequestBuilderRequestsMetadata,
		pathParametersMappings: ["folderId"],
	},
};
/**
 * Metadata for all the requests in the request builder.
 */
export const Routine_foldersRequestBuilderRequestsMetadata: RequestsMetadata = {
	get: {
		uriTemplate: Routine_foldersRequestBuilderUriTemplate,
		responseBodyContentType: "application/json",
		adapterMethodName: "send",
		responseBodyFactory: createRoutine_foldersGetResponseFromDiscriminatorValue,
	},
	post: {
		uriTemplate: Routine_foldersRequestBuilderUriTemplate,
		responseBodyContentType: "application/json",
		errorMappings: {
			400: createRoutineFolder400ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
		},
		adapterMethodName: "send",
		responseBodyFactory: createRoutineFolderFromDiscriminatorValue,
		requestBodyContentType: "application/json",
		requestBodySerializer: serializePostRoutineFolderRequestBody,
		requestInformationContentSetMethod: "setContentFromParsable",
	},
};
/* tslint:enable */
/* eslint-enable */
