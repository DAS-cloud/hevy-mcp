/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createRoutineFromDiscriminatorValue, serializePostRoutinesRequestBody, serializeRoutine, type PostRoutinesRequestBody, type Routine } from '../../models/index.js';
// @ts-ignore
import { type WithRoutineItemRequestBuilder, WithRoutineItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type ApiError, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Routine400Error}
 */
// @ts-ignore
export function createRoutine400ErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRoutine400Error;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Routine403Error}
 */
// @ts-ignore
export function createRoutine403ErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRoutine403Error;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RoutinesGetResponse}
 */
// @ts-ignore
export function createRoutinesGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRoutinesGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRoutine400Error(routine400Error: Partial<Routine400Error> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { routine400Error.errorEscaped = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRoutine403Error(routine403Error: Partial<Routine403Error> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { routine403Error.errorEscaped = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRoutinesGetResponse(routinesGetResponse: Partial<RoutinesGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "page": n => { routinesGetResponse.page = n.getNumberValue(); },
        "page_count": n => { routinesGetResponse.pageCount = n.getNumberValue(); },
        "routines": n => { routinesGetResponse.routines = n.getCollectionOfObjectValues<Routine>(createRoutineFromDiscriminatorValue); },
    }
}
export interface Routine400Error extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Error message
     */
    errorEscaped?: string | null;
}
export interface Routine403Error extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Error message
     */
    errorEscaped?: string | null;
}
export interface RoutinesGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Current page number
     */
    page?: number | null;
    /**
     * Total number of pages
     */
    pageCount?: number | null;
    /**
     * The routines property
     */
    routines?: Routine[] | null;
}
/**
 * Builds and executes requests for operations under /v1/routines
 */
export interface RoutinesRequestBuilder extends BaseRequestBuilder<RoutinesRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v1.routines.item collection
     * @param routineId The id of the routine
     * @returns {WithRoutineItemRequestBuilder}
     */
     byRoutineId(routineId: string) : WithRoutineItemRequestBuilder;
    /**
     * Get a paginated list of routines
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RoutinesGetResponse>}
     */
     get(requestConfiguration?: RequestConfiguration<RoutinesRequestBuilderGetQueryParameters> | undefined) : Promise<RoutinesGetResponse | undefined>;
    /**
     * Create a new routine
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Routine>}
     * @throws {Routine400Error} error when the service returns a 400 status code
     * @throws {Routine403Error} error when the service returns a 403 status code
     */
     post(body: PostRoutinesRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Routine | undefined>;
    /**
     * Get a paginated list of routines
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<RoutinesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create a new routine
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: PostRoutinesRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get a paginated list of routines
 */
export interface RoutinesRequestBuilderGetQueryParameters {
    /**
     * Page number (Must be 1 or greater)
     */
    page?: number;
    /**
     * Number of items on the requested page (Max 10)
     */
    pageSize?: number;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRoutine400Error(writer: SerializationWriter, routine400Error: Partial<Routine400Error> | undefined | null = {}) : void {
    if (routine400Error) {
        writer.writeStringValue("error", routine400Error.errorEscaped);
        writer.writeAdditionalData(routine400Error.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRoutine403Error(writer: SerializationWriter, routine403Error: Partial<Routine403Error> | undefined | null = {}) : void {
    if (routine403Error) {
        writer.writeStringValue("error", routine403Error.errorEscaped);
        writer.writeAdditionalData(routine403Error.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRoutinesGetResponse(writer: SerializationWriter, routinesGetResponse: Partial<RoutinesGetResponse> | undefined | null = {}) : void {
    if (routinesGetResponse) {
        writer.writeNumberValue("page", routinesGetResponse.page);
        writer.writeNumberValue("page_count", routinesGetResponse.pageCount);
        writer.writeCollectionOfObjectValues<Routine>("routines", routinesGetResponse.routines, serializeRoutine);
        writer.writeAdditionalData(routinesGetResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const RoutinesRequestBuilderUriTemplate = "{+baseurl}/v1/routines{?page*,pageSize*}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const RoutinesRequestBuilderNavigationMetadata: Record<Exclude<keyof RoutinesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byRoutineId: {
        requestsMetadata: WithRoutineItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["routineId"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RoutinesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: RoutinesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createRoutinesGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: RoutinesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createRoutine400ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createRoutine403ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createRoutineFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePostRoutinesRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
