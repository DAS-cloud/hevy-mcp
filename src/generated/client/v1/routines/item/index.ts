// @ts-ignore
import type {
	AdditionalDataHolder,
	ApiError,
	BaseRequestBuilder,
	Parsable,
	ParsableFactory,
	ParseNode,
	RequestConfiguration,
	RequestInformation,
	RequestsMetadata,
	SerializationWriter,
} from "@microsoft/kiota-abstractions";
/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import {
	type PutRoutinesRequestBody,
	type Routine,
	createRoutineFromDiscriminatorValue,
	serializePutRoutinesRequestBody,
	serializeRoutine,
} from "../../../models/index.js";

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Routine400Error}
 */
// @ts-ignore
export function createRoutine400ErrorFromDiscriminatorValue(
	parseNode: ParseNode | undefined,
): (instance?: Parsable) => Record<string, (node: ParseNode) => void> {
	return deserializeIntoRoutine400Error;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Routine404Error}
 */
// @ts-ignore
export function createRoutine404ErrorFromDiscriminatorValue(
	parseNode: ParseNode | undefined,
): (instance?: Parsable) => Record<string, (node: ParseNode) => void> {
	return deserializeIntoRoutine404Error;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRoutine400Error(
	routine400Error: Partial<Routine400Error> | undefined = {},
): Record<string, (node: ParseNode) => void> {
	return {
		error: (n) => {
			routine400Error.errorEscaped = n.getStringValue();
		},
	};
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRoutine404Error(
	routine404Error: Partial<Routine404Error> | undefined = {},
): Record<string, (node: ParseNode) => void> {
	return {
		error: (n) => {
			routine404Error.errorEscaped = n.getStringValue();
		},
	};
}
export interface Routine400Error
	extends AdditionalDataHolder,
		ApiError,
		Parsable {
	/**
	 * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
	 */
	additionalData?: Record<string, unknown>;
	/**
	 * Error message
	 */
	errorEscaped?: string | null;
}
export interface Routine404Error
	extends AdditionalDataHolder,
		ApiError,
		Parsable {
	/**
	 * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
	 */
	additionalData?: Record<string, unknown>;
	/**
	 * Error message
	 */
	errorEscaped?: string | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRoutine400Error(
	writer: SerializationWriter,
	routine400Error: Partial<Routine400Error> | undefined | null = {},
): void {
	if (routine400Error) {
		writer.writeStringValue("error", routine400Error.errorEscaped);
		writer.writeAdditionalData(routine400Error.additionalData);
	}
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRoutine404Error(
	writer: SerializationWriter,
	routine404Error: Partial<Routine404Error> | undefined | null = {},
): void {
	if (routine404Error) {
		writer.writeStringValue("error", routine404Error.errorEscaped);
		writer.writeAdditionalData(routine404Error.additionalData);
	}
}
/**
 * Builds and executes requests for operations under /v1/routines/{routineId}
 */
export interface WithRoutineItemRequestBuilder
	extends BaseRequestBuilder<WithRoutineItemRequestBuilder> {
	/**
	 * Update an existing routine
	 * @param body The request body
	 * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
	 * @returns {Promise<Routine>}
	 * @throws {Routine400Error} error when the service returns a 400 status code
	 * @throws {Routine404Error} error when the service returns a 404 status code
	 */
	put(
		body: PutRoutinesRequestBody,
		requestConfiguration?: RequestConfiguration<object> | undefined,
	): Promise<Routine | undefined>;
	/**
	 * Update an existing routine
	 * @param body The request body
	 * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
	 * @returns {RequestInformation}
	 */
	toPutRequestInformation(
		body: PutRoutinesRequestBody,
		requestConfiguration?: RequestConfiguration<object> | undefined,
	): RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithRoutineItemRequestBuilderUriTemplate =
	"{+baseurl}/v1/routines/{routineId}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithRoutineItemRequestBuilderRequestsMetadata: RequestsMetadata = {
	put: {
		uriTemplate: WithRoutineItemRequestBuilderUriTemplate,
		responseBodyContentType: "application/json",
		errorMappings: {
			400: createRoutine400ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
			404: createRoutine404ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
		},
		adapterMethodName: "send",
		responseBodyFactory: createRoutineFromDiscriminatorValue,
		requestBodyContentType: "application/json",
		requestBodySerializer: serializePutRoutinesRequestBody,
		requestInformationContentSetMethod: "setContentFromParsable",
	},
};
/* tslint:enable */
/* eslint-enable */
