/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createWorkoutFromDiscriminatorValue, serializePostWorkoutsRequestBody, serializeWorkout, type PostWorkoutsRequestBody, type Workout } from '../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type ApiError, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Workout400Error}
 */
// @ts-ignore
export function createWorkout400ErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkout400Error;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWorkout400Error(workout400Error: Partial<Workout400Error> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { workout400Error.errorEscaped = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWorkout400Error(writer: SerializationWriter, workout400Error: Partial<Workout400Error> | undefined | null = {}) : void {
    if (workout400Error) {
        writer.writeStringValue("error", workout400Error.errorEscaped);
        writer.writeAdditionalData(workout400Error.additionalData);
    }
}
/**
 * Builds and executes requests for operations under /v1/workouts/{workoutId}
 */
export interface WithWorkoutItemRequestBuilder extends BaseRequestBuilder<WithWorkoutItemRequestBuilder> {
    /**
     * Get a single workout’s complete details by the workoutId
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Workout>}
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Workout | undefined>;
    /**
     * Update an existing workout
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Workout>}
     * @throws {Workout400Error} error when the service returns a 400 status code
     */
     put(body: PostWorkoutsRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Workout | undefined>;
    /**
     * Get a single workout’s complete details by the workoutId
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Update an existing workout
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: PostWorkoutsRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface Workout400Error extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Error message
     */
    errorEscaped?: string | null;
}
/**
 * Uri template for the request builder.
 */
export const WithWorkoutItemRequestBuilderUriTemplate = "{+baseurl}/v1/workouts/{workoutId}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithWorkoutItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: WithWorkoutItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createWorkoutFromDiscriminatorValue,
    },
    put: {
        uriTemplate: WithWorkoutItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createWorkout400ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWorkoutFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePostWorkoutsRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
